
1.Docker Version: 1.2
2.
  2.1, Docker的总架构图展示
     C/S架构
	 Docker的后端是一个非常松耦合的架构
	 
	 Docker Daemon 提供server func 接收Docker Client request, Engine执行内部job
	 
	image    需要容器镜像时，则从Docker Registry中下载镜像，并通过镜像管理驱动graphdriver将下载镜像以Graph的形式存储
	network  需要为Docker创建网络环境时，通过网络管理驱动networkdriver创建并配置Docker容器网络环境
	resource 需要限制Docker容器运行资源或执行用户指令等操作时，则通过execdriver来完成。
	 
	 
	libcontainer是一项独立的容器管理包，networkdriver以及execdriver都是通过libcontainer来实现具体对容器进行的操作。 
  
  2.2, Docker架构图内部各模块功能与实现分析
     Docker Client:
	   与docker deamon通信： 1.tcp://host:port, 2.unix:://path/sockfile, 3.fd://socketfd
	   可设置docker cmd args TLS与deamon安全通信
	   Client 发送请求,Deamon接收并处理, Client接收Response并简单处理,client生命周期完成
	 Docker Deamon
	    backend deamon
		   启动一个Server,负责接收Client request,Server通过Router和分发调度找到Handler执行请求
		   docker命令执行时，通过传入的参数来判别Docker Daemon与Docker Client
		Docker Server, 
		   专门用来服务Client, 接受并调度分发Docker Client发送的request
		   Http.Server                    <=>   Docker Client
		   Mux.Router(method,URL,handler) <=>   Http.server
		   Handler                        <=>   Mux.Router
		   
		   docker的启动过程中，通过包gorilla/mux，创建了一个mux.Router，提供请求的路由(http method,URL->Handler)功能
		   创建完mux.Router之后，Docker将Server的监听地址以及mux.Router作为参数，创建一个httpSrv=http.Server{}，最终执行httpSrv.Serve()为请求服务
		   在Server的服务过程中，Server在listener上接受Docker Client的访问请求，并创建一个全新的goroutine来服务该请求
		   在goroutine中，首先读取请求内容，然后做解析工作，接着找到相应的路由项，随后调用相应的Handler来处理该请求，Handler处理完请求后回复
		   Docker Server的运行在Docker的启动过程中，是靠一个名为"serveapi"的job的运行来完成的。
		   Docker Server的运行是众多job中的一个，但是为了强调Docker Server的重要性以及为后续job服务的重要特性，将该"serveapi"的job单独抽离出来分析，理解为Docker Server
		Engine,
		   Engine是Docker架构中的运行引擎，同时也Docker运行的核心模块。它扮演Docker container存储仓库的角色，并且通过执行job的方式来操纵管理这些容器
		Job
           一个Job可以认为是Docker架构中Engine内部最基本的工作执行单元。Docker可以做的每一项工作，都 可以抽象为一个job		
	 Docker Registry
	      
	 Graph:
	    Repository ：具体存储的信息有：该容器镜像的元数据，容器镜像的大小信息，以及该容器镜像所代表的具体rootfs。
		GraphDB ：                                                                                                                                                                                                                                                                                                                                                                                                                                    一个构建在SQLite之上的小型图数据库
	     
	 Driver: graph,network,execdriver
	     通过Driver驱动，Docker可以实现对Docker容器执行环境的定制
		 为了将Docker容器的管理从Docker Daemon内部业务逻辑中区分开来，设计了Driver层驱动来接管所有这部分请求
		 
		 graphdriver主要用于完成容器镜像的管理，包括存储与获取
		 在graphdriver的初始化过程之前，有4种文件系统或类文件系统在其内部注册，它们分别是aufs、btrfs、vfs和devmapper
		 Docker在初始化之时，通过获取系统环境变量”DOCKER_DRIVER”来提取所使用driver的指定类型。而之后所有的graph操作，都使用该driver来执行
		 
		 networkdriver的用途是完成Docker容器网络环境的配置，
		 包括Docker环境创建网桥；Docker容器创建时虚拟网卡设备，容器分配IP、端口并与宿主机做端口映射，设置容器防火墙策略等。
		 
		 execdriver作为Docker容器的执行驱动，负责创建容器运行命名空间，负责容器资源使用的统计与限制，负责容器内部进程的真正运行
		 execdriver的实现过程中，原先使用LXC驱动调用LXC的接口，来操纵容器的配置以及生命周期，而现在execdriver默认使用native驱动
		 
		 
	 libcontainer
	     libcontainer是Docker架构中一个使用Go语言设计实现的库，设计初衷是希望该库可以不依靠任何依赖，直接访问内核中与容器相关的API
	     Docker可以直接调用libcontainer，而最终操纵容器的namespace、cgroups、apparmor、网络设备以及防火墙规则等
		 bcontainer提供了一整套标准的接口来满足上层对容器管理的需求。或者说，libcontainer屏蔽了Docker上层对容器的直接管理

	Docker container
	    fs      用户通过指定容器镜像，使得Docker容器可以自定义rootfs等文件系统；
        cpu mem 用户通过指定计算资源的配额，使得Docker容器使用指定的计算资源；
        network 用户通过配置网络及其安全策略，使得Docker容器拥有独立且安全的网络环境；
        cmd     用户通过指定运行的命令，使得Docker容器执行指定的工作。
	 
  2.3, Docker运行案例流程阐述
     1.docker pull
	    从Docker Registry中下载指定的容器镜像，并存储在本地的Graph中
		1. client 接收docker pull cmd, 解析cmd,发送HTTP POST URL"/imges/create?+++" to Deamon
		2. Server 接收HTTP request, 交给mux.Router,
		3. mux.Router 路由相应的Handler: PostImageCreate
		4. PostImageCreate handler, one job name pull start
		5. job 执行pullRepository, ，即从Registry中下载相应的一个或者多个image
		6. job 将image交给graphdriver
		7. graphdriver负责将image进行存储，一方创建graph对象，另一方面在GraphDB中记录image之间的关系
		
	2.docker run
	    Docker在执行这条命令的时候,所做工作可以分为两部分：
		   第一，创建Docker容器所需的rootfs；
		   第二，创建容器的网络等运行环境，并真正运行用户指令
	   在整个执行流程中，Docker Client给Docker Server发送了两次HTTP请求，第二次请求的发起取决于第一次请求的返回状态
       
  
        1. client 接收docker run cmd, 解析cmd, 发送http Post url "/container/create?+++"
		2. server 接收request, 交给mux.Router,
		3. mux.Router 解析url,method =》handler PostContainersCreate
		4. handler one job named create was be create and run
		5. job 执行Container.Create operation, 调用graphdriver
		6. graphdriver 从Graph 获取Dokcer container rootfs 需要的image
		7. graphdriver 将rootfs image 加载至docker container 指定的fs dir
		8. 上述正确 Client 收到 Server 返回status, 发送request POST URL /container/Container_ID/start
		9. Server 接收request, 交给mux.Router URL + method => handler
		10. mux.Router router to 相应handler => PostContainerStart
		11. PostContainerStart handler create a job named "start"
		12. 名为"start"的job执行完初步的配置工作后，开始配置与创建网络环境，调用networkdriver；
		13. network driver 创建net dev, ip port iptables 相应operator 转交给libcontainer的netlin pkg
		14. netlink完成Docker容器的网络环境配置与创建
		15. 返回至名为"start"的job，执行完一些辅助性操作后，job开始执行用户指令，调用execdriver
        16. execdriver 被调用, 初始化Container 内部运行环境, 如：namespace, 资源控制与隔离,用户命令的执行，相应的操作转交至libcontainer来完成
        17. ibcontainer被调用，完成Docker容器内部的运行环境初始化，并最终执行用户要求启动的命令
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   